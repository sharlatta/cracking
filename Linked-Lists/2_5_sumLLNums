//2.5. you have two number represented by a linked list, where each node contains a single digit.
//The digits are stored in reverse order, such thta 1's digit is at the  head of the list. Write a function that
//adds two numbers and returns a sum as a linked list

//EXAMPLE 
//Input (7->1->6) + (5->9->2). That is,  617+295
//Output: 2->1->9. That is 912
function sumLists1(list1, list2) {
    var num1 = convertListToInt(list1)
    var num2 = convertListToInt(list2)
    return convertIntToList(num1 + num2);
}
function convertListToInt(list) {
    var arr = [];
    var current = list.head;
    while (current) {
        arr.push(current.data);
        current = current.next;
    }
    return parseInt(arr.reverse().join(""), 10);
}
function convertIntToList(num) {
    var list = new LinkedList();
    var arr = num.toString(10).split("").reverse();
    for (var i = 0; i < arr.length; i++) {
        list.add(arr[i]);
    }
    return list;
}


function sumLists2(list1, list2) {
    var num1 = list1.head,
        num2 = list2.head,
        mod = 0;
    var sumList = new LinkedList();
    while (num1 || num2 || mod !== 0) {
        if (!num1 && !num2) {
            sumList.add(mod);
            return;
        }
        else {
            var sum = num1.data + num2.data + mod;
            var remainder = sum % 10,
                mod = Math.floor(sum / 10);
            sumList.add(remainder);
            num1 = num1.next;
            num2 = num2.next;
        }

    }
    return sumList;
}

//Suppose the digits are stored in forward order. Repeat the above problem  - TODO
